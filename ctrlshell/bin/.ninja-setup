#!/bin/bash
#
#
source /.IPS
if [ -z ${1} ] ; then
    INUSERS=($(etcdctl ls usr))
for (( i=0; i<${#INUSERS[@]}; i++ )) ; do
    uuser="${INUSERS[$i]}"
    nuser=$(echo $uuser | cut -d '/' -f 3)
    if [ ! -d "/efs/vol/$nuser" ] ; then
        echo -e "${BWhite} ${ipscmd} ${CALERT}${nuser}${NC}"
        #echo -e " ${CALERT}$nuser${NC} not setup as ninja "
    else
        #echo -e "${CVAL}deployed $nuser as ninja ${NC}"
        continue
    fi
done
    exit 1
fi

verify=$(etcdctl get usr/${1}/verify)
if [ $? -ne 0 ] ; then
    echo "${1} not verified"
    exit
else
    ls /efs/vol/${1}
    if [ $? -eq 0 ] ; then
        echo "warning user ${1} git dir exists"
        exit
    fi
fi

jobstart "$$"
trap "jobtrace '$$'" 0 1 2 3 6

msgbus "setting up ${1} for ninja status"

mygit="$(etcdctl --endpoints http://core.east1:2379 get ops/net/ninja/$1/git)"

targetdir="/efs/home/${1}"
iamcred="${targetdir}/ninja/.aws"
s3cred="${targetdir}/ninja/.s3cfg"
renvrc="${targetdir}/ninja/.renvrc"
etcdrc="${targetdir}/ninja/.etcdrc"
awsrc="${targetdir}/ninja/.awsrc"
mkdir -p $targetdir
skel="/efs/deploy/home"
posthead="${targetdir}/ninja/head.md"
postfoot="${targetdir}/ninja/foot.md"
cfg="$targetdir/irc/.irssi/config"
uml="$targetdir/ninja/sysblog.pml"
#gitcred="$targetdir/ninja/.git-credentials"
cp -rv ${skel}/irc ${targetdir}/
cp -rvf ${skel}/ninja ${targetdir}/
sed -i "s/BUDDY/${1}/g" $cfg
sed -i "s/BUDDY/${1}/g" $uml
sed -i "s/BUDDY/${1}/g" $etcdrc
#sed -i "s/BUDDY/${1}/g" $gitcred

echo "Your session will expire on $(etcdctl get situation/usr/${1}/expire)" >> ${posthead}

#echo "expire on $(etcdctl get situation/usr/${1}/expire)" >> ${posthead}

msgbus "reseting git to default state"
ssh core "sudo mkdir -p /efs/vol/${1}/"
echo "setting up db"
sleep 3
ssh core "sudo cp -rf /efs/vol/git-template/db /efs/vol/${1}/db"
if [ $? -ne 0 ] ; then
	echo -e "failed to setup database for repo, using ${BWhite}ninja-remove ${1}${NC} to cleanup"
	ninja-remove ${1}
	echo "Failed to setup ${1} for ninja shell"
	echo
	exit 1
fi

echo "setting up git repo"
sleep 3
ssh core "sudo cp -rf /efs/vol/git-template/git /efs/vol/${1}/git"
if [ $? -ne 0 ] ; then
	echo -e "failed to setup git service for ${1} repo, using ${BWhite}ninja-remove ${1}${NC} to cleanup"
	ninja-remove ${1}
	echo "Failed to setup ${1} for ninja shell"
	echo
	exit 1
fi

sleep 4
ssh core "sudo sed -i \"s/BUDDY/${1}/g\" /efs/vol/${1}/git/gogs/conf/app.ini"
echo "set repo premissions to system."
sleep 2
ssh core "sudo chown -R 1000.1000 /efs/vol/${1}/git"
sleep 2
ssh core "sudo chown -R 999.999 /efs/vol/${1}/db"
sleep 2
ssh core "sudo chown -R core /efs/ca/usr/${1}"

#cat /efs/ca/usr/${1}/${1}.cert.pem > /efs/home/${1}/irc/${1}.crt
sleep 2
#ssh core "sudo cat /efs/ca/usr/${1}/${1}.key.pem >> /efs/home/${1}/irc/${1}.crt"
#chmod go-rw /efs/home/${1}/irc/${1}.crt

mkdir -p /efs/share/hack/${1}

if [ ! -f /efs/ca/domain/${1}.seclab.ninja.cert.pem ] ; then
    echo "${1}.seclab.ninja domain certificate does not exist"
    echo " creating . . "
    msgbus "${1}.seclab.ninja domain certificate being created "
    fleetctl start trustdomain@${1}.seclab.ninja
    sleep 3
else
    echo 
    echo "Domain cert exists"
fi

# setup iam profile for bucket sync of session 
echo "set iam policy to session."
mkdir -p $iamcred
#aws s3api create-bucket --bucket east1.seclab.ninja.${1} --region us-east-1

aws iam create-user --user-name ${1} > ${iamcred}/${1}.id

cat > ${iamcred}/bucket.json <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
		"ec2:DeleteKeyPair",
		"ec2:ImportKeyPair",
		"ec2:DescribeKeyPair"
		],
            "Resource": ["*"]
        },
        {
            "Effect": "Allow",
            "Action": ["ec2:Describe*"],
            "Resource": ["*"]
        },
        {
            "Effect": "Allow",
            "Action": [
		"route53:ListHostedZones",
		"route53:ChangeResourceRecordSets",
		"route53:ListResourceRecordSets",
		"route53:CreateHostedZone",
		"route53domains:*"
	    ],
            "Resource": ["arn:aws:route53:::hostedzone/Z32O7AZSUAII2N/rrset"]
        },
        {
            "Effect": "Allow",
            "Action": ["SNS:Publish"],
            "Resource": ["$(etcdctl get usr/${1}/sub)"]
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:ListBucket",
                "s3:CreateBucket",
                "s3:PutBucketAcl"
                ],
            "Resource": ["arn:aws:s3:::east1.seclab.ninja.${1}"]
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
            ],
            "Resource": ["arn:aws:s3:::east1.seclab.ninja.${1}/*"]
        }
    ]
}
EOF

aws iam put-user-policy --user-name ${1} --policy-name ${1}-policy --policy-document file://${iamcred}/bucket.json

aws iam create-access-key --user-name ${1} > ${iamcred}/${1}.key
accesskey=$(cat ${iamcred}/${1}.key | jq -r '.AccessKey | .AccessKeyId')
accesssecret=$(cat ${iamcred}/${1}.key | jq -r '.AccessKey | .SecretAccessKey')

cat > ${iamcred}/credentials <<EOFF
[default]
aws_access_key_id = $accesskey
aws_secret_access_key = $accesssecret
EOFF

cat > ${awsrc} <<EORC
[credentials]
aws_access_key_id = $accesskey
aws_secret_access_key = $accesssecret
EORC

chmod -R go-rwx ${awsrc}

cat > ${iamcred}/config <<EOFFF
[default]
output = json
region = us-east-1
EOFFF

chmod -R go-rwx ${iamcred}

cat > ${renvrc} <<ENVRC
hosts=keystore.${1}:2379
ssl=false
ENVRC

chmod go-rwx ${renvrc}

cat > ${s3cred} <<EOFFFF
[default]
access_key = $accesskey
access_token = 
add_encoding_exts = 
add_headers = 
bucket_location = US
ca_certs_file = 
cache_file = 
check_ssl_certificate = True
check_ssl_hostname = True
cloudfront_host = cloudfront.amazonaws.com
default_mime_type = binary/octet-stream
delay_updates = False
delete_after = False
delete_after_fetch = False
delete_removed = False
dry_run = False
enable_multipart = True
encoding = UTF-8
encrypt = False
expiry_date = 
expiry_days = 
expiry_prefix = 
follow_symlinks = False
force = False
get_continue = False
gpg_command = None
gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_encrypt = %(gpg_command)s -c --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_passphrase = 
guess_mime_type = True
host_base = s3.amazonaws.com
host_bucket = %(bucket)s.s3.amazonaws.com
human_readable_sizes = False
invalidate_default_index_on_cf = False
invalidate_default_index_root_on_cf = True
invalidate_on_cf = False
kms_key = 
limit = -1
limitrate = 0
list_md5 = False
log_target_prefix = 
long_listing = False
max_delete = -1
mime_type = 
multipart_chunk_size_mb = 15
multipart_max_chunks = 10000
preserve_attrs = True
progress_meter = True
proxy_host = 
proxy_port = 0
put_continue = False
recursive = False
recv_chunk = 65536
reduced_redundancy = False
requester_pays = False
restore_days = 1
restore_priority = Standard
secret_key = $accesssecret
send_chunk = 65536
server_side_encryption = False
signature_v2 = False
simpledb_host = sdb.amazonaws.com
skip_existing = False
socket_timeout = 300
stats = False
stop_on_error = False
storage_class = 
urlencoding_mode = normal
use_http_expect = False
use_https = True
use_mime_magic = True
verbosity = WARNING
website_endpoint = http://%(bucket)s.s3-website-%(location)s.amazonaws.com/
website_error = 
website_index = index.html
EOFFFF

chmod go-rwx ${s3cred}
echo "$(ls -lh /efs/vol/${1})"
echo "$(ls -lh /efs/home/${1})"

    msgbus "${1} setup for ninja level access"
